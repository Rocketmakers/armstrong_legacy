$prefix-for-webkit: true !default;
$prefix-for-mozilla: true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera: true !default;
$prefix-for-spec: true !default; // required for keyframe mixin


@mixin prefixer ($property, $value, $prefixes) {
    @each $prefix in $prefixes {
        @if $prefix == webkit {
            @if $prefix-for-webkit {
                -webkit-#{$property}: $value;
            }
        }
        @else if $prefix == moz {
            @if $prefix-for-mozilla {
                -moz-#{$property}: $value;
            }
        }
        @else if $prefix == ms {
            @if $prefix-for-microsoft {
                -ms-#{$property}: $value;
            }
        }
        @else if $prefix == o {
            @if $prefix-for-opera {
                -o-#{$property}: $value;
            }
        }
        @else if $prefix == spec {
            @if $prefix-for-spec {
                #{$property}: $value;
            }
        }
        @else {
            @warn "Unrecognized prefix: #{$prefix}";
        }
    }
}


@mixin box-sizing {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

@mixin user-select {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

@mixin text-shadow($argument) {
    -webkit-text-shadow: $argument;
    text-shadow: $argument;
}

@mixin inner-shadow($horizontal: 0, $vertical: 1px, $blur: 2px, $color: rgba(255, 255, 255, 0.5)) {
    -webkit-box-shadow: inset $horizontal $vertical $blur $color;
    -moz-box-shadow: inset $horizontal $vertical $blur $color;
    box-shadow: inset $horizontal $vertical $blur $color;
}

@mixin box-shadow($arguments) {
    -webkit-box-shadow: $arguments;
    -moz-box-shadow: $arguments;
    box-shadow: $arguments;
}

@mixin gradient($color: #F5F5F5, $start: #EEE, $stop: #FFF) {
    background: $color;
    background: -webkit-gradient(linear, left bottom, left top, color-stop(0, $start), color-stop(1, $stop));
    background: -ms-linear-gradient(bottom, $start, $stop);
    background: -moz-linear-gradient(center bottom, $start 0%, $stop 100%);
    background: -o-linear-gradient($stop, $start);
}

@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
    -webkit-box-shadow: $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
    -moz-box-shadow: $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
    box-shadow: $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
}





$dark-text-default: #000 !default;
$light-text-default: #fff !default;

// Calculeate brightness of a given color.
@function brightness($color) {
    @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
}

// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function color-contrast($color, $dark: $dark-text-default, $light: $light-text-default) {
    @if $color == null {
        @return null;
    }
    @else {
        $color-brightness: brightness($color);
        $light-text-brightness: brightness($light);
        $dark-text-brightness: brightness($dark);

        @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
    }
}



@mixin transition ($properties...) {
    @if length($properties) >= 1 {
        @include prefixer(transition, $properties, webkit moz spec);
    }


    @else {
        $properties: all 0.15s ease-out 0s;
        @include prefixer(transition, $properties, webkit moz spec);
    }
}


@mixin transition-property ($properties...) {
    -webkit-transition-property: transition-property-names($properties, 'webkit');
    -moz-transition-property: transition-property-names($properties, 'moz');
    transition-property: transition-property-names($properties, false);
}


@mixin transition-duration ($times...) {
    @include prefixer(transition-duration, $times, webkit moz spec);
}


@mixin transition-timing-function ($motions...) {
    // ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier()
    @include prefixer(transition-timing-function, $motions, webkit moz spec);
}


@mixin transition-delay ($times...) {
    @include prefixer(transition-delay, $times, webkit moz spec);
}
